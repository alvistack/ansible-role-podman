---

.script-git-submodule: &script-git-submodule
  - |
    git submodule sync --recursive
    git submodule update --init --recursive

.script-symlink-ansible-role: &script-symlink-ansible-role
  - |
    export _ROLE=$(echo $CI_PROJECT_NAME | sed 's/^ansible-role-//g')
    mkdir -p $HOME/.ansible/roles
    ln -s $CI_PROJECT_DIR $HOME/.ansible/roles/$_ROLE

.script-bootstrap-vagrant: &script-bootstrap-vagrant
  - |
    if ! [[ -x "$(command -v vagrant)" ]]; then
      curl -skL -O https://releases.hashicorp.com/vagrant/2.2.15/vagrant_2.2.15_x86_64.deb
      sudo dpkg -i vagrant_2.2.15_x86_64.deb
      rm -rf vagrant_2.2.15_*
    fi
    vagrant cloud auth login --token $VAGRANT_CLOUD_TOKEN

.script-bootstrap-libvirt: &script-bootstrap-libvirt
  - |
    if ! [[ -x "$(command -v kvm)" ]]; then
      export DEBIAN_FRONTEND=noninteractive
      sudo -E apt-get update
      sudo -E apt-get install -y binutils bridge-utils dnsmasq-base ebtables gcc libguestfs-tools libvirt-clients libvirt-daemon-system libvirt-dev make qemu-kvm qemu-utils ruby-dev
      vagrant plugin install vagrant-libvirt
    fi
    sudo systemctl start libvirtd.service

.script-bootstrap-ansible: &script-bootstrap-ansible
  - |
    if ! [[ -x "$(command -v ansible)" ]]; then
      export DEBIAN_FRONTEND=noninteractive
      export PIPX_HOME=/usr/local/share/pipx
      export PIPX_BIN_DIR=/usr/local/bin
      sudo -E apt-get update
      sudo -E apt-get install -y bzip2 ca-certificates curl gcc gnupg gzip iproute2 procps python3 python3-apt python3-cryptography python3-dev python3-jmespath python3-lxml python3-netaddr python3-pip python3-setuptools python3-venv python3-virtualenv python3-wheel sudo tar unzip xz-utils zip
      sudo -E pip3 install --prefix=/usr/local --upgrade pipx
      sudo -E pipx install --force --pip-args='--upgrade' flake8
      sudo -E pipx install --force --pip-args='--upgrade' yamllint
      sudo -E pipx install --force --pip-args='--upgrade' --include-deps 'ansible>=2.10.3,<2.11.0'
      sudo -E pipx inject --force --pip-args='--upgrade' --include-apps ansible ansible-lint
      sudo -E pipx inject --force --pip-args='--upgrade' ansible docker netaddr python-vagrant
    fi

.script-bootstrap-molecule: &script-bootstrap-molecule
  - |
    if ! [[ -x "$(command -v molecule)" ]]; then
      export PIPX_HOME=/usr/local/share/pipx
      export PIPX_BIN_DIR=/usr/local/bin
      sudo -E pipx inject --force --include-apps ansible molecule
      sudo -E pipx inject --force ansible molecule-docker molecule-vagrant
    fi

.script-molecule-test: &script-molecule-test
  - |
    export MOLECULE_INSTANCE_NAME=$(pwgen -1AB 12)
    molecule test -s $_MOLECULE_SCENARIO_NAME

.script-ansible-galaxy-role-import: &script-ansible-galaxy-role-import
  - |
    if [[ -n "$CI_COMMIT_TAG" ]] && [[ "$CI_COMMIT_TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
      export _USER=$CI_PROJECT_NAMESPACE
      export _REPO=$CI_PROJECT_NAME
    elif [[ -n "$CI_COMMIT_BRANCH" ]] && [[ "$CI_COMMIT_BRANCH" =~ master ]]; then
      export _USER=$CI_PROJECT_NAMESPACE
      export _REPO=$CI_PROJECT_NAME
    else
      exit 0
    fi
    ansible-galaxy role import --token $ANSIBLE_GALAXY_TOKEN $_USER $_REPO

.job-molecule: &job-molecule
  script:
    - *script-bootstrap-vagrant
    - *script-bootstrap-libvirt
    - *script-bootstrap-ansible
    - *script-bootstrap-molecule
    - *script-molecule-test

.job-ansible-galaxy: &job-ansible-galaxy
  script:
    - *script-bootstrap-ansible
    - *script-ansible-galaxy-role-import

default:
  before_script:
    - *script-git-submodule
    - *script-symlink-ansible-role

build:ubuntu-20.04:
  <<: *job-molecule
  stage: build
  retry: 2
  variables:
    _MOLECULE_SCENARIO_NAME: "ubuntu-20.04"

build:ubuntu-18.04:
  <<: *job-molecule
  stage: build
  retry: 2
  variables:
    _MOLECULE_SCENARIO_NAME: "ubuntu-18.04"

test:ubuntu-20.10:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "ubuntu-20.10"
  allow_failure: true

test:centos-8-stream:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "centos-8-stream"
  allow_failure: true

test:centos-7:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "centos-7"
  allow_failure: true

test:opensuse-tumbleweed:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "opensuse-tumbleweed"
  allow_failure: true

test:opensuse-leap-15.2:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "opensuse-leap-15.2"
  allow_failure: true

test:debian-10:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "debian-10"
  allow_failure: true

test:fedora-33:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "fedora-33"
  allow_failure: true

test:rhel-8:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "rhel-8"
  allow_failure: true

test:rhel-7:
  <<: *job-molecule
  stage: test
  variables:
    _MOLECULE_SCENARIO_NAME: "rhel-7"
  allow_failure: true

deploy:ansible-galaxy:
  <<: *job-ansible-galaxy
  stage: deploy
  retry: 2
  needs:
    - build:ubuntu-20.04
    - build:ubuntu-18.04
